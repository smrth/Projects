#include "multisprite.h"
#include "framefactory.h"

class Player {
public:
  Player(Vector2f pos, Vector2f vel,string  n, const std::vector<Frame* > f,int frameNumber, int frameInterval) : 
    playerSprite(new MultiframeSprite(pos, vel, n,f, frameNumber, frameInterval)),life(Gamedata::getInstance()->getXmlInt("maxLife"))
  {}
  
  Player(Player& rhs):
  playerSprite(new MultiframeSprite(rhs.getSprite()->getPosition(),rhs.getSprite()->getVelocity(),rhs.getSprite()->getName(),rhs.getSprite()->getFrame(),rhs.getSprite()->getnumberofFrame(),rhs.getSprite()->getframeInterval())),
  life(5)
  {}
  
  virtual ~Player() {}

  virtual void update(int ticks) { playerSprite->update(ticks); }
  virtual void draw() const { playerSprite->draw(); }
  const MultiframeSprite* getSprite() const { return playerSprite; }
  void setSprite(MultiframeSprite * spr) { playerSprite=spr;  }

  void decrease_life(){ life=life-1; }
  unsigned getLife() const { return unsigned(life); }
  void  stop() { 
    /*Vector2f pos=playerSprite->getPosition();
    MultiframeSprite * mf=new MultiframeSprite(
	    pos,Vector2f(0,0),"ninjaStand",frameFactory::getInstance().setFrame("ninjaStand"),3,3);
    playerSprite=mf;*/
    playerSprite->velocityX(0);  
    playerSprite->velocityY(0); 
    playerSprite->setnumberofFrame(3);
  }
  void right();
  void left();
  void up();
  void down();

private:
  MultiframeSprite* playerSprite;
  unsigned life;
  Player & operator=(Player&);
};

